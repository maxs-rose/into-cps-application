name: Package

on: 
   push:
     branches: 
       - hdm/electron-builder

jobs:
  package:
    runs-on: ${{ matrix.os }}
  
    strategy:
      matrix:
        os: [ubuntu-latest] #windows-latest, macos-latest]


    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2
        with: 
          ref: hdm/electron-builder

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
  
      - name: Get App Version
        id: get_version
        run: echo ::set-output name=VERSION::$(node -p -e "require('./package.json').version")
        shell: bash
  
      - name: Install Dependencies
        run: npm install  

      - name: Install Gulp In Mac
        run: npm install -g gulp 
        if: startsWith(matrix.os, 'mac')

      - name: Initialize gulp
        run: gulp init 

      - name: Build
        run: gulp prep-pkg

      - name: Package
        run: npm run dist-linux

      - name: Upload Linux Version
        uses: actions/upload-artifact@v1
        with:
          path: ./release/INTO-CPS-Application-${{ steps.get_version.outputs.VERSION }}
          name: linux-archive.zip
        if: startsWith(matrix.os, 'ubuntu')

      - name: Upload Windows Version
        uses: actions/upload-artifact@v1
        with:
          path: ./release/INTO-CPS-Application Setup ${{ steps.get_version.outputs.VERSION }}.exe
          name: windows-archive.zip
        if: startsWith(matrix.os, 'windows')

      #- name: Zip Darwin Version
      #  run: cd pkg ; zip into-cps-app-${{ steps.get_version.outputs.VERSION }}-darwin-x64.zip . -rq
      #  if: startsWith(matrix.os, 'mac')

      #- name: Upload Darwin Version
      #  uses: actions/upload-artifact@v1
      #  with:
      #    path: ./pkg/into-cps-app-${{ steps.get_version.outputs.VERSION }}-darwin-x64.zip
      #    name: darwin-archive.zip
      #  if: startsWith(matrix.os, 'mac')

